{
	"Name": "Ding",
	"Docs": "The Ding API lets you compile git branches, build binaries, run tests, and\npublish binaries.",
	"Functions": [
		{
			"Name": "Status",
			"Docs": "Status checks the health of the application.",
			"Params": [],
			"Returns": []
		},
		{
			"Name": "BuildCreate",
			"Docs": "BuildCreate builds a specific commit in the background, returning immediately.\n\n`Commit` can be empty, in which case the origin is cloned and the checked\nout commit is looked up.\n\nLow priority builds are executed after regular builds. And only one low\npriority build is running over all repo's.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "branch",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "commit",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "lowPrio",
					"Typewords": [
						"bool"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"Build"
					]
				}
			]
		},
		{
			"Name": "CreateBuild",
			"Docs": "CreateBuild exists for compatibility with older \"ding kick\" behaviour.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "branch",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "commit",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"Build"
					]
				}
			]
		},
		{
			"Name": "BuildsCreateLowPrio",
			"Docs": "BuildsCreateLowPrio creates low priority builds for each repository, for the default branch.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "BuildCancel",
			"Docs": "BuildCancel cancels a currently running build.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "buildID",
					"Typewords": [
						"int32"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "ReleaseCreate",
			"Docs": "ReleaseCreate release a build.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "buildID",
					"Typewords": [
						"int32"
					]
				}
			],
			"Returns": [
				{
					"Name": "release",
					"Typewords": [
						"Build"
					]
				}
			]
		},
		{
			"Name": "RepoBuilds",
			"Docs": "RepoBuilds returns all repositories and recent build info for \"active\" branches.\nA branch is active if its name is \"master\" or \"main\" (for git), \"default\" (for hg), or\n\"develop\", or if the last build was less than 4 weeks ago. The most recent\nbuild is returned.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "rb",
					"Typewords": [
						"[]",
						"RepoBuilds"
					]
				}
			]
		},
		{
			"Name": "Repo",
			"Docs": "Repo returns the named repository.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "repo",
					"Typewords": [
						"Repo"
					]
				}
			]
		},
		{
			"Name": "Builds",
			"Docs": "Builds returns builds for a repo.\n\nThe Steps field of builds is cleared for transfer size.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "builds",
					"Typewords": [
						"[]",
						"Build"
					]
				}
			]
		},
		{
			"Name": "RepoCreate",
			"Docs": "RepoCreate creates a new repository.\nIf repo.UID is not null, a unique uid is assigned.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repo",
					"Typewords": [
						"Repo"
					]
				}
			],
			"Returns": [
				{
					"Name": "r",
					"Typewords": [
						"Repo"
					]
				}
			]
		},
		{
			"Name": "RepoSave",
			"Docs": "RepoSave changes a repository.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repo",
					"Typewords": [
						"Repo"
					]
				}
			],
			"Returns": [
				{
					"Name": "r",
					"Typewords": [
						"Repo"
					]
				}
			]
		},
		{
			"Name": "RepoClearHomedir",
			"Docs": "RepoClearHomedir removes the home directory this repository shares across\nbuilds.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "ClearRepoHomedirs",
			"Docs": "ClearRepoHomedirs removes the home directory of all repositories.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "RepoRemove",
			"Docs": "RepoRemove removes a repository and all its builds.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "Build",
			"Docs": "Build returns the build, including steps output.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "buildID",
					"Typewords": [
						"int32"
					]
				}
			],
			"Returns": [
				{
					"Name": "b",
					"Typewords": [
						"Build"
					]
				}
			]
		},
		{
			"Name": "BuildRemove",
			"Docs": "BuildRemove removes a build completely. Both from database and all local files.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "buildID",
					"Typewords": [
						"int32"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "BuildCleanupBuilddir",
			"Docs": "BuildCleanupBuilddir cleans up (removes) a build directory.\nThis does not remove the build itself from the database.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "buildID",
					"Typewords": [
						"int32"
					]
				}
			],
			"Returns": [
				{
					"Name": "build",
					"Typewords": [
						"Build"
					]
				}
			]
		},
		{
			"Name": "GoToolchainsListInstalled",
			"Docs": "GoToolchainsListInstalled returns the installed Go toolchains (eg \"go1.13.8\",\n\"go1.14\") in GoToolchainDir, and current \"active\" versions with a shortname, eg\n\"go\" as \"go1.14\" and \"go-prev\" as \"go1.13.8\".",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "installed",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "active",
					"Typewords": [
						"{}",
						"string"
					]
				}
			]
		},
		{
			"Name": "GoToolchainsListReleased",
			"Docs": "GoToolchainsListReleased returns all known released Go toolchains available at\ngolang.org/dl/, eg \"go1.13.8\", \"go1.14\".",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "released",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "GoToolchainInstall",
			"Docs": "GoToolchainInstall downloads, verifies and extracts the release Go toolchain\nrepresented by goversion (eg \"go1.13.8\", \"go1.14\") into the GoToolchainDir, and\noptionally \"activates\" the version under shortname (\"go\", \"go-prev\", \"\"; empty\nstring does nothing).",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "goversion",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "shortname",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "GoToolchainRemove",
			"Docs": "GoToolchainRemove removes a toolchain from go toolchain dir.\nIt does not remove a shortname symlink to this toolchain if it exists.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "goversion",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "GoToolchainActivate",
			"Docs": "GoToolchainActivate activates goversion (eg \"go1.13.8\", \"go1.14\") under the name\nshortname (\"go\" or \"go-prev\"), by creating a symlink in the GoToolchainDir.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "goversion",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "shortname",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "LogLevel",
			"Docs": "LogLevel returns the current log level.",
			"Params": [],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"LogLevel"
					]
				}
			]
		},
		{
			"Name": "LogLevelSet",
			"Docs": "LogLevelSet sets a new log level.",
			"Params": [
				{
					"Name": "level",
					"Typewords": [
						"LogLevel"
					]
				}
			],
			"Returns": []
		}
	],
	"Sections": [
		{
			"Name": "Server-Sent Events",
			"Docs": "SSE is a real-time streaming updates API using server-sent event, available at /events.\nQuery string parameter \"password\" is required.\nYou'll receive the following events with a HTTP GET request to `/events`, encoded as JSON:\n- `repo`, repository was updated or created\n- `removeRepo`, repository was removed\n- `build`, build was updated or created\n- `removeBuild`, build was removed\n- `output`, new lines of output from a command for an active build\n\nThese types are described below, with an _event_-prefix. E.g. type _EventRepo_ describes the `repo` event.",
			"Functions": [
				{
					"Name": "ExampleSSE",
					"Docs": "ExampleSSE is a no-op.\nThis function only serves to include documentation for the server-sent event types.",
					"Params": [],
					"Returns": [
						{
							"Name": "repo",
							"Typewords": [
								"EventRepo"
							]
						},
						{
							"Name": "removeRepo",
							"Typewords": [
								"EventRemoveRepo"
							]
						},
						{
							"Name": "build",
							"Typewords": [
								"EventBuild"
							]
						},
						{
							"Name": "removeBuild",
							"Typewords": [
								"EventRemoveBuild"
							]
						},
						{
							"Name": "output",
							"Typewords": [
								"EventOutput"
							]
						}
					]
				}
			],
			"Sections": [],
			"Structs": [
				{
					"Name": "EventRepo",
					"Docs": "EventRepo represents an update of a repository or creation of a repository.",
					"Fields": [
						{
							"Name": "Repo",
							"Docs": "",
							"Typewords": [
								"Repo"
							]
						}
					]
				},
				{
					"Name": "EventRemoveRepo",
					"Docs": "EventRemoveRepo represents the removal of a repository.",
					"Fields": [
						{
							"Name": "RepoName",
							"Docs": "",
							"Typewords": [
								"string"
							]
						}
					]
				},
				{
					"Name": "EventBuild",
					"Docs": "EventBuild represents an update to a build, or the start of a new build.\nOutput is not part of the build, see EventOutput below.",
					"Fields": [
						{
							"Name": "Build",
							"Docs": "",
							"Typewords": [
								"Build"
							]
						}
					]
				},
				{
					"Name": "EventRemoveBuild",
					"Docs": "EventRemoveBuild represents the removal of a build from the database.",
					"Fields": [
						{
							"Name": "RepoName",
							"Docs": "",
							"Typewords": [
								"string"
							]
						},
						{
							"Name": "BuildID",
							"Docs": "",
							"Typewords": [
								"int32"
							]
						}
					]
				},
				{
					"Name": "EventOutput",
					"Docs": "EventOutput represents new output from a build.\nText only contains the newly added output, not the full output so far.",
					"Fields": [
						{
							"Name": "BuildID",
							"Docs": "",
							"Typewords": [
								"int32"
							]
						},
						{
							"Name": "Step",
							"Docs": "During which the output was generated, eg `clone`, `build`.",
							"Typewords": [
								"string"
							]
						},
						{
							"Name": "Where",
							"Docs": "`stdout` or `stderr`.",
							"Typewords": [
								"string"
							]
						},
						{
							"Name": "Text",
							"Docs": "Lines of text written.",
							"Typewords": [
								"string"
							]
						}
					]
				}
			],
			"Ints": [],
			"Strings": [],
			"SherpaVersion": 0
		}
	],
	"Structs": [
		{
			"Name": "Build",
			"Docs": "Build is an attempt at building a repository.",
			"Fields": [
				{
					"Name": "ID",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "RepoName",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Branch",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "CommitHash",
					"Docs": "Can be empty until `checkout` step, when building latest version of a branch.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Status",
					"Docs": "",
					"Typewords": [
						"BuildStatus"
					]
				},
				{
					"Name": "Created",
					"Docs": "Time of creation of this build. Ding only has one concurrent build per repo, so the start time may be later.",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "Start",
					"Docs": "Time the build was started. Of a build is finish - start.",
					"Typewords": [
						"nullable",
						"timestamp"
					]
				},
				{
					"Name": "Finish",
					"Docs": "",
					"Typewords": [
						"nullable",
						"timestamp"
					]
				},
				{
					"Name": "ErrorMessage",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Released",
					"Docs": "Once set, this build itself won't be removed from the database, but its build directory may be removed.",
					"Typewords": [
						"nullable",
						"timestamp"
					]
				},
				{
					"Name": "BuilddirRemoved",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "Coverage",
					"Docs": "Test coverage in percentage, from 0 to 100.",
					"Typewords": [
						"nullable",
						"float32"
					]
				},
				{
					"Name": "CoverageReportFile",
					"Docs": "Relative to URL /dl/\u003creponame\u003e/\u003cbuildid\u003e.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Version",
					"Docs": "Version if this build, typically contains a semver version, with optional commit count/hash, perhaps a branch.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "BuildScript",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "LowPrio",
					"Docs": "Low-prio builds run after regular builds for a repo have finished. And we only run one low-prio build in ding at a time. Useful after a toolchain update.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "LastLine",
					"Docs": "Last line of output, when build has completed.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "DiskUsage",
					"Docs": "Disk usage for build.",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "HomeDiskUsageDelta",
					"Docs": "Change in disk usage of shared home directory, if enabled for this repository. Disk usage can shrink, e.g. after a cleanup.",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "Results",
					"Docs": "Only set for success builds.",
					"Typewords": [
						"[]",
						"Result"
					]
				},
				{
					"Name": "Steps",
					"Docs": "Only set for finished builds.",
					"Typewords": [
						"[]",
						"Step"
					]
				}
			]
		},
		{
			"Name": "Result",
			"Docs": "Result is a file created during a build, as the result of a build.",
			"Fields": [
				{
					"Name": "Command",
					"Docs": "Short name of command, without version, as you would want to run it from a command-line.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Os",
					"Docs": "eg `any`, `linux`, `darwin, `openbsd`, `windows`.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Arch",
					"Docs": "eg `any`, `amd64`, `arm64`.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Toolchain",
					"Docs": "String describing the tools used during build, eg SDK version.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Filename",
					"Docs": "Path relative to the checkout directory where build.sh is run. For builds, the file is started at \u003cdataDir\u003e/build/\u003crepoName\u003e/\u003cbuildID\u003e/checkout/\u003ccheckoutPath\u003e/\u003cfilename\u003e. For releases, the file is stored gzipped at \u003cdataDir\u003e/release/\u003crepoName\u003e/\u003cbuildID\u003e/\u003cbasename of filename\u003e.gz.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Filesize",
					"Docs": "Size of filename.",
					"Typewords": [
						"int64"
					]
				}
			]
		},
		{
			"Name": "Step",
			"Docs": "Step is one phase of a build and stores the output generated in that step.",
			"Fields": [
				{
					"Name": "Name",
					"Docs": "Mostly same values as build.status.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Output",
					"Docs": "Combined output of stdout and stderr.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Nsec",
					"Docs": "Time it took this step to finish, initially 0.",
					"Typewords": [
						"int64"
					]
				}
			]
		},
		{
			"Name": "RepoBuilds",
			"Docs": "RepoBuilds is a repository and its recent builds, per branch.",
			"Fields": [
				{
					"Name": "Repo",
					"Docs": "",
					"Typewords": [
						"Repo"
					]
				},
				{
					"Name": "Builds",
					"Docs": "Field Steps is cleared to reduce data transferred.",
					"Typewords": [
						"[]",
						"Build"
					]
				}
			]
		},
		{
			"Name": "Repo",
			"Docs": "Repo is a repository as stored in the database.",
			"Fields": [
				{
					"Name": "Name",
					"Docs": "Short name for repo, typically last element of repo URL/path.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "VCS",
					"Docs": "",
					"Typewords": [
						"VCS"
					]
				},
				{
					"Name": "Origin",
					"Docs": "git/mercurial \"URL\" (as understood by the respective commands), often SSH or HTTPS. if `vcs` is `command`, this is executed using sh.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "DefaultBranch",
					"Docs": "Name of default branch, e.g. \"main\" or \"master\" for git, or \"default\" for mercurial, empty for command.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "CheckoutPath",
					"Docs": "Path to place the checkout in.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "BuildScript",
					"Docs": "Shell scripts that compiles the software, runs tests, and creates releasable files.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "UID",
					"Docs": "If set, fixed uid to use for builds, sharing a home directory where files can be cached, to speed up builds.",
					"Typewords": [
						"nullable",
						"uint32"
					]
				},
				{
					"Name": "HomeDiskUsage",
					"Docs": "Disk usage of shared home directory after last finished build. Only if UID is set.",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "NotifyEmailAddrs",
					"Docs": "If not empty, each address gets notified about build breakage/fixage, overriding the default address configured in the configuration file.",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		}
	],
	"Ints": [],
	"Strings": [
		{
			"Name": "BuildStatus",
			"Docs": "BuildStatus indicates the progress of a build.",
			"Values": [
				{
					"Name": "StatusNew",
					"Value": "new",
					"Docs": "Build queued but not yet started."
				},
				{
					"Name": "StatusClone",
					"Value": "clone",
					"Docs": "Cloning source code, e.g. from git."
				},
				{
					"Name": "StatusBuild",
					"Value": "build",
					"Docs": "Building application."
				},
				{
					"Name": "StatusSuccess",
					"Value": "success",
					"Docs": "Build was successful."
				},
				{
					"Name": "StatusCancelled",
					"Value": "cancelled",
					"Docs": "Build was cancelled before finishing."
				}
			]
		},
		{
			"Name": "VCS",
			"Docs": "VCS indicates the mechanism to fetch the source code.",
			"Values": [
				{
					"Name": "VCSGit",
					"Value": "git",
					"Docs": ""
				},
				{
					"Name": "VCSMercurial",
					"Value": "mercurial",
					"Docs": ""
				},
				{
					"Name": "VCSCommand",
					"Value": "command",
					"Docs": "Custom shell script that will do the cloning. Escape hatch mechanism to support\npast/future systems."
				}
			]
		},
		{
			"Name": "LogLevel",
			"Docs": "LogLevel indicates the severity of a log message.",
			"Values": [
				{
					"Name": "LogDebug",
					"Value": "debug",
					"Docs": ""
				},
				{
					"Name": "LogInfo",
					"Value": "info",
					"Docs": ""
				},
				{
					"Name": "LogWarn",
					"Value": "warn",
					"Docs": ""
				},
				{
					"Name": "LogError",
					"Value": "error",
					"Docs": ""
				}
			]
		}
	],
	"SherpaVersion": 0,
	"SherpadocVersion": 1
}
