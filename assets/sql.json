[{"version":0,"filename":"000-schema.sql","sql":"create table repo (\n\tid serial primary key,\n\tname text not null,\n\torigin text not null\n);\n\ncreate table build (\n\tid serial primary key,\n\trepo_id int not null references repo(id),\n\tbranch text not null,\n\tcommit_hash text not null,\n\tstatus text not null check(status in ('new', 'clone', 'checkout', 'build', 'test', 'release', 'success')),\n\tstart timestamptz not null default now(),\n\tfinish timestamptz\n);\n\ncreate table result (\n\tid serial primary key,\n\tbuild_id int not null references build(id),\n\tcommand text not null,\n\tversion text not null,\n\tos text not null,\n\tarch text not null,\n\ttoolchain text not null,\n\tfilename text not null\n);\n\ncreate view build_with_result as\nselect\n\tbuild.*,\n\tarray_remove(array_agg(result.*), null) as results\nfrom build\nleft join result on build.id = result.build_id\ngroup by build.id\n;\n\ncreate table schema_upgrades (\n\tversion int not null unique,\n\tupgraded timestamp without time zone default (now() at time zone 'utc')\n);\ninsert into schema_upgrades (version) values (0);\n\n\ncreate or replace function assert_schema_version(expected_version int) returns void as $$\ndeclare\n\tcurrent_version int;\nbegin\n\tselect max(version) into current_version from schema_upgrades;\n\tif current_version != expected_version then\n\t\traise exception 'cannot perform schema upgrade: wrong versions, expected version %, saw version %', expected_version, current_version;\n\tend if;\nend;\n$$ language plpgsql;\n\n\n-- in future upgrade scripts, assert that the version is the one expect:\nselect assert_schema_version(0);\n-- insert into schema_upgrades (version) values (1);\n"},{"version":1,"filename":"001-result-file-size.sql","sql":"select assert_schema_version(0);\ninsert into schema_upgrades (version) values (1);\n\nalter table result add column filesize bigint not null default 0;\n"},{"version":2,"filename":"002-build-error.sql","sql":"select assert_schema_version(1);\ninsert into schema_upgrades (version) values (2);\n\nalter table build add column error_message text not null default '';\n\n-- must drop \u0026 create to get new column in view\ndrop view build_with_result;\ncreate view build_with_result as\nselect\n\tbuild.*,\n\tarray_remove(array_agg(result.*), null) as results\nfrom build\nleft join result on build.id = result.build_id\ngroup by build.id\n;\n"},{"version":3,"filename":"003-repo-name-unique.sql","sql":"select assert_schema_version(2);\ninsert into schema_upgrades (version) values (3);\n\nalter table repo add unique (name);\n"},{"version":4,"filename":"004-release.sql","sql":"select assert_schema_version(3);\ninsert into schema_upgrades (version) values (4);\n\nalter table build add column builddir_removed boolean not null default false;\nalter table build add column released timestamptz;\n\n-- must drop \u0026 create to get new column in view\ndrop view build_with_result;\ncreate view build_with_result as\nselect\n\tbuild.*,\n\tarray_remove(array_agg(result.*), null) as results\nfrom build\nleft join result on build.id = result.build_id\ngroup by build.id\n;\n\ncreate table release (\n\tbuild_id int not null unique references build(id),\n\ttime timestamptz not null default now(),\n\tbuild_config json not null,\n\tsteps json not null\n);\n"},{"version":5,"filename":"005-single-script.sql","sql":"select assert_schema_version(4);\ninsert into schema_upgrades (version) values (5);\n\n-- note: this script also has accomanying code that merges shell scripts from disk into this new field.\nalter table repo add column build_script text default '' not null;\n\nalter table release add column build_script text default '' not null;\nupdate release set build_script=(build_config-\u003e\u003e'build_script') || E'\\n\\necho step:test\\n' || (build_config-\u003e\u003e'test_script') || E'\\n\\necho step:release\\n' ||  (build_config-\u003e\u003e'release_script');\nalter table release drop column build_config;\n"},{"version":6,"filename":"006-branch-non-empty.sql","sql":"select assert_schema_version(5);\ninsert into schema_upgrades (version) values (6);\n\nupdate build set branch = 'x' where branch = '';\nalter table build add constraint branch_not_empty check (branch != '');\n"},{"version":7,"filename":"007-repo-checkout-dir.sql","sql":"select assert_schema_version(6);\ninsert into schema_upgrades (version) values (7);\n\nalter table repo add column checkout_path text;\nupdate repo set checkout_path = name;\nalter table repo add constraint checkout_path_not_empty check(checkout_path != '');\nalter table repo alter column checkout_path set not null;\n\n"},{"version":8,"filename":"008-repo-other-vcs.sql","sql":"select assert_schema_version(7);\ninsert into schema_upgrades (version) values (8);\n\nalter table repo add column vcs text;\nupdate repo set vcs = 'git';\nalter table repo add constraint repo_vcs_valid check(vcs in ('git', 'mercurial', 'command'));\nalter table repo alter column vcs set not null;\n"},{"version":9,"filename":"009-gzip-releases.sql","sql":"select assert_schema_version(8);\ninsert into schema_upgrades (version) values (9);\n\n-- only code\n"},{"version":10,"filename":"010-build-disk-usage.sql","sql":"select assert_schema_version(9);\ninsert into schema_upgrades (version) values (10);\n\nalter table build add column disk_usage bigint;\n\ndrop view build_with_result;\ncreate view build_with_result as\nselect\n\tbuild.*,\n\tarray_remove(array_agg(result.*), null) as results\nfrom build\nleft join result on build.id = result.build_id\ngroup by build.id\n;\n"},{"version":11,"filename":"011-repo-uid.sql","sql":"select assert_schema_version(10);\ninsert into schema_upgrades (version) values (11);\n\nalter table repo add column uid int;\n"},{"version":12,"filename":"012.sql","sql":"select assert_schema_version(11);\ninsert into schema_upgrades (version) values (12);\n\nalter table build add column coverage real;\nalter table build add column coverage_report_file text not null default '';\n\n-- Must recreate view after adding/removing columns.\ndrop view build_with_result;\ncreate view build_with_result as\nselect\n\tbuild.*,\n\tarray_remove(array_agg(result.*), null) as results\nfrom build\nleft join result on build.id = result.build_id\ngroup by build.id\n;\n"},{"version":13,"filename":"013.sql","sql":"select assert_schema_version(12);\ninsert into schema_upgrades (version) values (13);\n\nalter table build add column created timestamptz not null default now();\nupdate build set created=start;\nalter table build alter column start drop not null;\nalter table build alter column start drop default;\n\n-- Must recreate view after adding/removing columns.\ndrop view build_with_result;\ncreate view build_with_result as\nselect\n\tbuild.*,\n\tarray_remove(array_agg(result.*), null) as results\nfrom build\nleft join result on build.id = result.build_id\ngroup by build.id\n;\n"},{"version":14,"filename":"014.sql","sql":"select assert_schema_version(13);\ninsert into schema_upgrades (version) values (14);\n\nalter table build add column version text not null default '';\nupdate build set version=(select coalesce(min(version), '') from result where result.build_id=build.id);\nalter table result drop column version;\n\n-- Must recreate view after adding/removing columns.\ndrop view build_with_result;\ncreate view build_with_result as\nselect\n\tbuild.*,\n\tarray_remove(array_agg(result.*), null) as results\nfrom build\nleft join result on build.id = result.build_id\ngroup by build.id\n;\n"},{"version":15,"filename":"015.sql","sql":"select assert_schema_version(14);\ninsert into schema_upgrades (version) values (15);\n\nalter table repo add home_disk_usage bigint not null default 0;\nalter table build add home_disk_usage_delta bigint not null default 0;\n\n-- Must recreate view after adding/removing columns.\ndrop view build_with_result;\ncreate view build_with_result as\nselect\n\tbuild.*,\n\tarray_remove(array_agg(result.*), null) as results\nfrom build\nleft join result on build.id = result.build_id\ngroup by build.id\n;\n"},{"version":16,"filename":"016.sql","sql":"select assert_schema_version(15);\ninsert into schema_upgrades (version) values (16);\n\nalter table build add low_prio boolean not null default false;\n\n-- Must recreate view after adding/removing columns.\ndrop view build_with_result;\ncreate view build_with_result as\nselect\n\tbuild.*,\n\tarray_remove(array_agg(result.*), null) as results\nfrom build\nleft join result on build.id = result.build_id\ngroup by build.id\n;\n"},{"version":17,"filename":"017.sql","sql":"select assert_schema_version(16);\ninsert into schema_upgrades (version) values (17);\n\nupdate build set status = 'build' where status not in ('new', 'clone', 'build', 'success');\n\nalter table build drop constraint build_status_check;\nalter table build add constraint build_status_check check (status in ('new', 'clone', 'build', 'success', 'cancelled'));\n"},{"version":18,"filename":"018.sql","sql":"select assert_schema_version(17);\ninsert into schema_upgrades (version) values (18);\n\nalter table repo add column default_branch text not null default '';\nupdate repo set default_branch='master' where vcs='git';\nupdate repo set default_branch='default' where vcs='bitbucket';\n"}]