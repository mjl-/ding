{
	"Name": "Ding",
	"Docs": "The Ding API lets you compile git branches, build binaries, run tests, and publish binaries.",
	"Functions": [
		{
			"Name": "status",
			"Docs": "Status checks the health of the application.\nIf backend connectivity is broken, this sherpa call results in a 500 internal server error. Useful for monitoring tools.",
			"Params": [],
			"Returns": []
		},
		{
			"Name": "createBuild",
			"Docs": "CreateBuild builds a specific commit in the background, returning immediately.\n`Commit` can be empty, in which case the origin is cloned and the checked out commit is looked up.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "branch",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "commit",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"Build"
					]
				}
			]
		},
		{
			"Name": "createBuildLowPrio",
			"Docs": "CreateBuildLowPrio creates a build, but with low priority.\nLow priority builds are executed after regular builds. And only one low priority build is running over all repo's.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "branch",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "commit",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"Build"
					]
				}
			]
		},
		{
			"Name": "createLowPrioBuilds",
			"Docs": "CreateLowPrioBuilds creates low priority builds for each repository, for the default branch.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "cancelBuild",
			"Docs": "CancelBuild cancels a currently running build.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "buildID",
					"Typewords": [
						"int32"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "createRelease",
			"Docs": "CreateRelease release a build.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "buildID",
					"Typewords": [
						"int32"
					]
				}
			],
			"Returns": [
				{
					"Name": "build",
					"Typewords": [
						"Build"
					]
				}
			]
		},
		{
			"Name": "repoBuilds",
			"Docs": "RepoBuilds returns all repositories and recent build info for \"active\" branches.\nA branch is active if its name is \"master\" or \"main\" (for git), \"default\" (for hg), or\n\"develop\", or if the last build was less than 4 weeks ago. The most recent\ncompleted build is returned, and optionally the first build in progress.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "rb",
					"Typewords": [
						"[]",
						"RepoBuilds"
					]
				}
			]
		},
		{
			"Name": "repo",
			"Docs": "Repo returns the named repository.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "repo",
					"Typewords": [
						"Repo"
					]
				}
			]
		},
		{
			"Name": "builds",
			"Docs": "Builds returns builds for a repo.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "builds",
					"Typewords": [
						"[]",
						"Build"
					]
				}
			]
		},
		{
			"Name": "createRepo",
			"Docs": "CreateRepo creates a new repository.\nIf repo.UID is not null, a unique uid is assigned.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repo",
					"Typewords": [
						"Repo"
					]
				}
			],
			"Returns": [
				{
					"Name": "r",
					"Typewords": [
						"Repo"
					]
				}
			]
		},
		{
			"Name": "saveRepo",
			"Docs": "SaveRepo changes a repository.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repo",
					"Typewords": [
						"Repo"
					]
				}
			],
			"Returns": [
				{
					"Name": "r",
					"Typewords": [
						"Repo"
					]
				}
			]
		},
		{
			"Name": "clearRepoHomedir",
			"Docs": "ClearRepoHomedir removes the home directory this repository shares across builds.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "clearRepoHomedirs",
			"Docs": "ClearRepoHomedirs removes the home directory of all repositories.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "removeRepo",
			"Docs": "RemoveRepo removes a repository and all its builds.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "buildResult",
			"Docs": "BuildResult returns the results of the requested build.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "buildID",
					"Typewords": [
						"int32"
					]
				}
			],
			"Returns": [
				{
					"Name": "br",
					"Typewords": [
						"BuildResult"
					]
				}
			]
		},
		{
			"Name": "release",
			"Docs": "Release fetches the build config and results for a release.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "buildID",
					"Typewords": [
						"int32"
					]
				}
			],
			"Returns": [
				{
					"Name": "br",
					"Typewords": [
						"BuildResult"
					]
				}
			]
		},
		{
			"Name": "removeBuild",
			"Docs": "RemoveBuild removes a build completely. Both from database and all local files.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "buildID",
					"Typewords": [
						"int32"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "cleanupBuilddir",
			"Docs": "CleanupBuilddir cleans up (removes) a build directory.\nThis does not remove the build itself from the database.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "repoName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "buildID",
					"Typewords": [
						"int32"
					]
				}
			],
			"Returns": [
				{
					"Name": "build",
					"Typewords": [
						"Build"
					]
				}
			]
		},
		{
			"Name": "listInstalledGoToolchains",
			"Docs": "ListInstalledGoToolchains returns the installed Go toolchains (eg \"go1.13.8\",\n\"go1.14\") in GoToolchainDir, and current \"active\" versions with a shortname, eg\n\"go\" as \"go1.14\" and \"go-prev\" as \"go1.13.8\".",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "installed",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "active",
					"Typewords": [
						"{}",
						"string"
					]
				}
			]
		},
		{
			"Name": "listReleasedGoToolchains",
			"Docs": "ListReleasedGoToolchains returns all known released Go toolchains available at\ngolang.org/dl/, eg \"go1.13.8\", \"go1.14\".",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "released",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "installGoToolchain",
			"Docs": "InstallGoToolchain downloads, verifies and extracts the release Go toolchain\nrepresented by goversion (eg \"go1.13.8\", \"go1.14\") into the GoToolchainDir, and\noptionally \"activates\" the version under shortname (\"go\", \"go-prev\", \"\"; empty\nstring does nothing).",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "goversion",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "shortname",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "removeGoToolchain",
			"Docs": "RemoveGoToolchain removes a toolchain from go toolchain dir.\nIt does not remove a shortname symlink to this toolchain if it exists.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "goversion",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "activateGoToolchain",
			"Docs": "ActivateGoToolchain activates goversion (eg \"go1.13.8\", \"go1.14\") under the name\nshortname (\"go\" or \"go-prev\"), by creating a symlink in the GoToolchainDir.",
			"Params": [
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "goversion",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "shortname",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		}
	],
	"Sections": [
		{
			"Name": "Server-Sent Events",
			"Docs": "SSE is a real-time streaming updates API using server-sent event, available at /events.\nQuery string parameter \"password\" is required.\nYou'll receive the following events with a HTTP GET request to `/events`, encoded as JSON:\n- `repo`, repository was updated or created\n- `removeRepo`, repository was removed\n- `build`, build was updated or created\n- `removeBuild`, build was removed\n- `output`, new lines of output from a command for an active build\n\nThese types are described below, with an _event_-prefix. E.g. type _EventRepo_ describes the `repo` event.",
			"Functions": [
				{
					"Name": "exampleSSE",
					"Docs": "ExampleSSE is a no-op.\nThis function only serves to include documentation for the server-sent event types.",
					"Params": [],
					"Returns": [
						{
							"Name": "repo",
							"Typewords": [
								"EventRepo"
							]
						},
						{
							"Name": "removeRepo",
							"Typewords": [
								"EventRemoveRepo"
							]
						},
						{
							"Name": "build",
							"Typewords": [
								"EventBuild"
							]
						},
						{
							"Name": "removeBuild",
							"Typewords": [
								"EventRemoveBuild"
							]
						},
						{
							"Name": "output",
							"Typewords": [
								"EventOutput"
							]
						}
					]
				}
			],
			"Sections": [],
			"Structs": [
				{
					"Name": "EventRepo",
					"Docs": "EventRepo represents an update of a repository or creation of a repository.",
					"Fields": [
						{
							"Name": "repo",
							"Docs": "",
							"Typewords": [
								"Repo"
							]
						}
					]
				},
				{
					"Name": "EventRemoveRepo",
					"Docs": "EventRemoveRepo represents the removal of a repository.",
					"Fields": [
						{
							"Name": "repo_name",
							"Docs": "",
							"Typewords": [
								"string"
							]
						}
					]
				},
				{
					"Name": "EventBuild",
					"Docs": "EventBuild represents an update to a build, or the start of a new build.\nOutput is not part of the build, see EventOutput below.",
					"Fields": [
						{
							"Name": "repo_name",
							"Docs": "",
							"Typewords": [
								"string"
							]
						},
						{
							"Name": "build",
							"Docs": "",
							"Typewords": [
								"Build"
							]
						}
					]
				},
				{
					"Name": "EventRemoveBuild",
					"Docs": "EventRemoveBuild represents the removal of a build from the database.",
					"Fields": [
						{
							"Name": "repo_name",
							"Docs": "",
							"Typewords": [
								"string"
							]
						},
						{
							"Name": "build_id",
							"Docs": "",
							"Typewords": [
								"int32"
							]
						}
					]
				},
				{
					"Name": "EventOutput",
					"Docs": "EventOutput represents new output from a build.\nText only contains the newly added output, not the full output so far.",
					"Fields": [
						{
							"Name": "build_id",
							"Docs": "",
							"Typewords": [
								"int32"
							]
						},
						{
							"Name": "step",
							"Docs": "during which the output was generated, eg `clone`, `checkout`, `build`",
							"Typewords": [
								"string"
							]
						},
						{
							"Name": "where",
							"Docs": "`stdout` or `stderr`",
							"Typewords": [
								"string"
							]
						},
						{
							"Name": "text",
							"Docs": "lines of text written",
							"Typewords": [
								"string"
							]
						}
					]
				}
			],
			"Ints": [],
			"Strings": [],
			"SherpaVersion": 0
		}
	],
	"Structs": [
		{
			"Name": "Build",
			"Docs": "Build is an attempt at building a repository.",
			"Fields": [
				{
					"Name": "id",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "repo_id",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "branch",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "commit_hash",
					"Docs": "can be empty until `checkout` step, when building latest version of a branch",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "status",
					"Docs": "`new`, `clone`, `checkout`, `build`, `success`",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "created",
					"Docs": "Time of creation of this build. Ding only has one concurrent build per repo, so the start time may be later.",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "start",
					"Docs": "Time the build was started. Of a build is finish - start.",
					"Typewords": [
						"nullable",
						"timestamp"
					]
				},
				{
					"Name": "finish",
					"Docs": "",
					"Typewords": [
						"nullable",
						"timestamp"
					]
				},
				{
					"Name": "error_message",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "released",
					"Docs": "",
					"Typewords": [
						"nullable",
						"timestamp"
					]
				},
				{
					"Name": "builddir_removed",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "coverage",
					"Docs": "Test coverage in percentage, from 0 to 100.",
					"Typewords": [
						"nullable",
						"float32"
					]
				},
				{
					"Name": "coverage_report_file",
					"Docs": "Relative to URL /dl/\u003creponame\u003e/\u003cbuildid\u003e.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "version",
					"Docs": "Version if this build, typically contains a semver version, with optional commit count/hash, perhaps a branch.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "low_prio",
					"Docs": "Low-prio builds run after regular builds for a repo have finished. And we only run one low-prio build in ding at a time. Useful after a toolchain update.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "last_line",
					"Docs": "Last line from last steps output.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "disk_usage",
					"Docs": "Disk usage for build.",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "home_disk_usage_delta",
					"Docs": "Change in disk usage of shared home directory, if enabled for this repository. Disk usage can shrink, e.g. after a cleanup.",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "results",
					"Docs": "",
					"Typewords": [
						"[]",
						"Result"
					]
				}
			]
		},
		{
			"Name": "Result",
			"Docs": "Result is a file created during a build, as the result of a build. Files like this can be released.",
			"Fields": [
				{
					"Name": "command",
					"Docs": "short name of command, without version, as you would want to run it from a command-line",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "os",
					"Docs": "eg `any`, `linux`, `darwin, `openbsd`, `windows`",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "arch",
					"Docs": "eg `any`, `amd64`, `arm64`",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "toolchain",
					"Docs": "string describing the tools used during build, eg SDK version",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "filename",
					"Docs": "path relative to the checkout directory where build.sh is run",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "filesize",
					"Docs": "size of filename",
					"Typewords": [
						"int64"
					]
				}
			]
		},
		{
			"Name": "RepoBuilds",
			"Docs": "RepoBuilds is a repository and its recent builds, per branch.",
			"Fields": [
				{
					"Name": "repo",
					"Docs": "",
					"Typewords": [
						"Repo"
					]
				},
				{
					"Name": "builds",
					"Docs": "",
					"Typewords": [
						"[]",
						"Build"
					]
				}
			]
		},
		{
			"Name": "Repo",
			"Docs": "Repo is a repository as stored in the database.",
			"Fields": [
				{
					"Name": "id",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "name",
					"Docs": "short name for repo, typically last element of repo URL/path",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "vcs",
					"Docs": "`git`, `mercurial` or `command`",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "origin",
					"Docs": "git/mercurial \"URL\" (as understood by the respective commands), often SSH or HTTPS. if `vcs` is `command`, this is executed using sh.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "default_branch",
					"Docs": "Name of default branch, e.g. \"main\" or \"master\" for git, or \"default\" for mercurial.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "checkout_path",
					"Docs": "path to place the checkout in.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "build_script",
					"Docs": "shell scripts that compiles the software, runs tests, and creates releasable files.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "uid",
					"Docs": "If set, fixed uid to use for builds, sharing a home directory where files can be cached, to speed up builds.",
					"Typewords": [
						"nullable",
						"uint32"
					]
				},
				{
					"Name": "home_disk_usage",
					"Docs": "Disk usage of shared home directory after last finished build. Only if UID is set.",
					"Typewords": [
						"int64"
					]
				}
			]
		},
		{
			"Name": "BuildResult",
			"Docs": "BuildResult is the stored result of a build, including the build script and step outputs.",
			"Fields": [
				{
					"Name": "build",
					"Docs": "",
					"Typewords": [
						"Build"
					]
				},
				{
					"Name": "build_script",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "steps",
					"Docs": "",
					"Typewords": [
						"[]",
						"Step"
					]
				}
			]
		},
		{
			"Name": "Step",
			"Docs": "Step is one phase of a build and stores the output generated in that step.",
			"Fields": [
				{
					"Name": "name",
					"Docs": "same values as build.status",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "stdout",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "stderr",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "output",
					"Docs": "combined output of stdout and stderr",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "nsec",
					"Docs": "time it took this step to finish, initially 0",
					"Typewords": [
						"int64"
					]
				}
			]
		}
	],
	"Ints": [],
	"Strings": [],
	"SherpaVersion": 0,
	"SherpadocVersion": 1
}
